CREATE DATABASE Lab3;



CREATE TABLE Category
(
    categoryID   INT NOT NULL AUTO_INCREMENT,
    categoryName VARCHAR(20),
    PRIMARY KEY (categoryID)
);

-- Add unique index to prevent duplicate categories
CREATE UNIQUE INDEX categoryNameIndex ON Category (categoryName);


-- Create Disc AFTER Category due to connection
CREATE TABLE Disc
(
    discID         INT NOT NULL AUTO_INCREMENT,
    discName       VARCHAR(50),
    discCategoryID INT,
    discColor      VARCHAR(20),
    discPrice      SMALLINT,
    PRIMARY KEY (discID),
    FOREIGN KEY (discCategoryID) REFERENCES Category (categoryID)
);

-- Add categories into Category
INSERT INTO Category (categoryName)
VALUES ('Putt&Approach'),
       ('Midrange'),
       ('Fairway Driver'),
       ('Distance Driver');

-- Check that the categories exist in the table, SHOULD RETURN ALL THE CATEGORIES
SELECT *
FROM Category
ORDER BY categoryID;


-- Add molds into Mold
INSERT INTO Mold (moldName, speed, glide, turn, fade)
VALUES ('Pearl'),
       ('Fuse'),
       ('Grace''),
       ('Maul'),
       ('Trus'),
       ('Diamond'),
       ('Ballista''),
       ('Pure'),
       ('Ruby'),
       ('Spike');


-- Add items indo Disc
INSERT INTO Disc (discCategoryID, discStats, discColor, discPrice)
VALUES ((SELECT categoryID FROM Category WHERE categoryName = 'Putt&Approach'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Zero' AND moldName = 'Pure'),
        'Orange', 219),
       ((SELECT categoryID FROM Category WHERE categoryName = 'Midrange'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Gold' AND moldName = 'Fuse'),
        'Yellow', 239),
       ((SELECT categoryID FROM Category WHERE categoryName = 'Fairway Driver'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Opto' AND moldName = 'Diamond'),
        'Blue', 299),
       ((SELECT categoryID FROM Category WHERE categoryName = 'Distance Driver'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Gold' AND moldName = 'Ballista'),
        'White', 319),
       ((SELECT categoryID FROM Category WHERE categoryName = 'Midrange'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Opto' AND moldName = 'Pearl'),
        'Blue', 179),
       ((SELECT categoryID FROM Category WHERE categoryName = 'Distance Driver'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Royal' AND moldName = 'Grace'),
        'Blue', 239),
       ((SELECT categoryID FROM Category WHERE categoryName = 'Fairway Driver'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Opto' AND moldName = 'Maul'),
        'Green', 199),
       ((SELECT categoryID FROM Category WHERE categoryName = 'Midrange'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Royal' AND moldName = 'Trust'),
        'Red', 269),
       ((SELECT categoryID FROM Category WHERE categoryName = 'Fairway Driver'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Gold' AND moldName = 'Diamond'),
        'White', 239),
       ((SELECT categoryID FROM Category WHERE categoryName = 'Putt&Approach'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Zero' AND moldName = 'Pure'),
        'Red', 269),
       ((SELECT categoryID FROM Category WHERE categoryName = 'Putt&Approach'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Retro' AND moldName = 'Ruby'),
        'White', 239),
       ((SELECT categoryID FROM Category WHERE categoryName = 'Putt&Approach'),
        (SELECT plasticMoldID FROM viewGetPlasticMold WHERE plasticName = 'Zero' AND moldName = 'Spike'),
        'White', 239);

-- Check that the discs exist in the table, SHOULD RETURN ALL THE DISCS
SELECT *
FROM Disc
ORDER BY discID;


-- Search through a function, SHOULD RETURN ALL THE DISCS IN ORDER BY DIFFICULT
SELECT *,
       CASE
           WHEN sum(turn + fade) < 0 THEN 'Easy'
           WHEN sum(turn + fade) > 0 THEN 'Advanced'
           ELSE 'Neutral'
           END AS 'level'
FROM viewDiscs
GROUP BY discID
ORDER BY sum(turn + fade);


-- Search for a specific category, SHOULD RETURN ALL THE DISCS IN 'MIDRANGE'
SELECT *
FROM viewDiscs
WHERE categoryName = 'Midrange';

-- Remove all discs with price under 249kr
DELETE
FROM Disc
WHERE discPrice < 199;

-- Check that delete worked as expected, SHOULD RETURN ALL DISCS AND NO DISC_PRICE UNDER 249kr
SELECT *
FROM viewDiscs;